# top level
read scalar
if "title" read next event and set title
if "buttons" call buttons_parser

# buttons parser
get event, it should be the sequence start
loop over elements
for each element create a new row
if "title" then read next event and set row's title, make a row
 in gtk and set the title
if "icons" then call icons_parser

# icons parser
get event, it should be a sequcne start
get event, it should be a mapping start
loop over mappings
   get event, expect a key
   get event, expect a value
   checking that the keys match "title" "icon" or "command"
   if we get an mapping end event, create a button and insert it via gtk
if we get an end sequence event, close out the row, and continue

gboolean config_read_top();
gboolean config_read_buttons();
gboolean config_read_icons();
gboolean config_read_icon();

YAML_STREAM_START_EVENT
YAML_DOCUMENT_START_EVENT
SCALAR_EVENT anchor (null), tag (null), value table plain_implicit
#table
    YAML_SEQUENCE_START_EVENT, tag (null)

        YAML_MAPPING_START_EVENT
            SCALAR_EVENT anchor (null), tag (null), value title plain_implicit
            SCALAR_EVENT anchor (null), tag (null), value Title of row plain_implicit
        YAML_MAPPING_END_EVENT

        YAML_MAPPING_START_EVENT
            SCALAR_EVENT anchor (null), tag (null), value icons plain_implicit
            #icons
                YAML_SEQUENCE_START_EVENT, tag (null)
                    YAML_MAPPING_START_EVENT
                        SCALAR_EVENT anchor (null), tag (null), value title plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value Something plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value path/to/icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value command plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value shell command line plain_implicit
                    YAML_MAPPING_END_EVENT
                    YAML_MAPPING_START_EVENT
                        SCALAR_EVENT anchor (null), tag (null), value title plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value Something plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value path/to/icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value command plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value shell command line plain_implicit
                    YAML_MAPPING_END_EVENT
                YAML_SEQUENCE_END_EVENT
        YAML_MAPPING_END_EVENT

        YAML_MAPPING_START_EVENT
            SCALAR_EVENT anchor (null), tag (null), value title plain_implicit
            #title
            SCALAR_EVENT anchor (null), tag (null), value foo plain_implicit
        YAML_MAPPING_END_EVENT

        YAML_MAPPING_START_EVENT
            SCALAR_EVENT anchor (null), tag (null), value icons plain_implicit
            #icons
                YAML_SEQUENCE_START_EVENT, tag (null)
                    YAML_MAPPING_START_EVENT
                        SCALAR_EVENT anchor (null), tag (null), value title plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value Something plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value path/to/icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value command plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value shell command line plain_implicit
                    YAML_MAPPING_END_EVENT
                    YAML_MAPPING_START_EVENT
                        SCALAR_EVENT anchor (null), tag (null), value title plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value Something''s Happening plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value path/to/icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value command plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value shell command line plain_implicit
                    YAML_MAPPING_END_EVENT
                    YAML_MAPPING_START_EVENT
                        SCALAR_EVENT anchor (null), tag (null), value title plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value Something''s Happening plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value path/to/icon plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value command plain_implicit
                        SCALAR_EVENT anchor (null), tag (null), value shell command line plain_implicit
                    YAML_MAPPING_END_EVENT
                YAML_SEQUENCE_END_EVENT
        YAML_MAPPING_END_EVENT

    YAML_SEQUENCE_END_EVENT
YAML_MAPPING_END_EVENT
YAML_DOCUMENT_END_EVENT
YAML_STREAM_END_EVENT


    window = gtk_window_new( GTK_WINDOW_TOPLEVEL );
    g_signal_connect( window, "delete-event",
                      G_CALLBACK(delete_event), NULL );
    g_signal_connect( window, "destroy",
                      G_CALLBACK (destroy), NULL );
    gtk_container_set_border_width( GTK_CONTAINER (window), 10 );

    button[0] = gtk_button_new_with_label( "HP 530 A" );
    g_signal_connect( button[0], "clicked",
                      G_CALLBACK (hello), NULL );
    g_signal_connect_swapped( button[0], "clicked",
                              G_CALLBACK (gtk_widget_destroy), window );

    box = gtk_hbox_new( TRUE, 5 );

    button[1] = gtk_button_new_with_label( "HP 530 B" );
    button[2] = gtk_button_new_with_label( "Acer One A" );
    button[3] = gtk_button_new_with_label( "Acer One B" );
    button[4] = gtk_button_new_with_label( "Acer Aspire" );
    button[5] = gtk_button_new_with_label( "UFCW" );

    image[0] = gtk_image_new_from_file( "hp530a.png" );
    image[1] = gtk_image_new_from_file( "hp530b.png" );
    image[2] = gtk_image_new_from_file( "aceronea.png" );
    image[3] = gtk_image_new_from_file( "aceroneb.png" );
    image[4] = gtk_image_new_from_file( "aceroneb.png" );
    image[5] = gtk_image_new_from_file( "aceroneb.png" );

    for(i=0;i<6;i++) {
        gtk_button_set_image( GTK_BUTTON(button[i]), image[i] );
        gtk_button_set_image_position( GTK_BUTTON(button[i]),
                                       GTK_POS_TOP );
        gtk_box_pack_start( GTK_BOX(box), button[i], FALSE, FALSE, 5 );
        gtk_widget_show( button[i] );
    }
    gtk_widget_show( GTK_WIDGET(box) );
    gtk_container_add( GTK_CONTAINER (window), GTK_WIDGET(box) );
    gtk_widget_show( window );
    gtk_main();
